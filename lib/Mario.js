// Generated by psc version 0.5.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($amp, $up, complement, shl, shr, zshr, $bar) {
        this["&"] = $amp;
        this["^"] = $up;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
        this["|"] = $bar;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $bar = function (dict) {
        return dict["|"];
    };
    var $up = function (dict) {
        return dict["^"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_1) {
        return $less$greater(__dict_Semigroup_1);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $amp = function (dict) {
        return dict["&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = function () {
        return new Show(function (_14) {
            return "Unit {}";
        });
    };
    var showString = function () {
        return new Show(showStringImpl);
    };
    var showOrdering = function () {
        return new Show(function (_22) {
            if (_22 instanceof LT) {
                return "LT";
            };
            if (_22 instanceof GT) {
                return "GT";
            };
            if (_22 instanceof EQ) {
                return "EQ";
            };
            throw new Error("Failed pattern match");
        });
    };
    var showNumber = function () {
        return new Show(showNumberImpl);
    };
    var showBoolean = function () {
        return new Show(function (_15) {
            if (_15) {
                return "true";
            };
            if (!_15) {
                return "false";
            };
            throw new Error("Failed pattern match");
        });
    };
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_2) {
        return new Show(showArrayImpl(show(__dict_Show_2)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = function () {
        return new Semigroupoid(function (f) {
            return function (g) {
                return function (x) {
                    return f(g(x));
                };
            };
        });
    };
    var semigroupUnit = function () {
        return new Semigroup(function (_29) {
            return function (_30) {
                return {};
            };
        });
    };
    var semigroupString = function () {
        return new Semigroup(concatString);
    };
    var semigroupArr = function (__dict_Semigroup_3) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_3)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_4) {
        return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = function () {
        return new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_5) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_5["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_5)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_6) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = function () {
        return new Functor($less$less$less(semigroupoidArr()));
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = function () {
        return new Eq(function (_18) {
            return function (_19) {
                return false;
            };
        }, function (_16) {
            return function (_17) {
                return true;
            };
        });
    };
    var ordUnit = function () {
        return new Ord(eqUnit, function (_23) {
            return function (_24) {
                return EQ.value;
            };
        });
    };
    var eqString = function () {
        return new Eq(refIneq, refEq);
    };
    var ordString = function () {
        return new Ord(eqString, unsafeCompare);
    };
    var eqNumber = function () {
        return new Eq(refIneq, refEq);
    };
    var ordNumber = function () {
        return new Ord(eqNumber, unsafeCompare);
    };
    var eqBoolean = function () {
        return new Eq(refIneq, refEq);
    };
    var ordBoolean = function () {
        return new Ord(eqBoolean, function (_25) {
            return function (_26) {
                if (!_25 && !_26) {
                    return EQ.value;
                };
                if (!_25 && _26) {
                    return LT.value;
                };
                if (_25 && _26) {
                    return EQ.value;
                };
                if (_25 && !_26) {
                    return GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var $$const = function (_10) {
        return function (_11) {
            return _10;
        };
    };
    var $$void = function (__dict_Functor_8) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_8)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_10) {
        return function (a1) {
            return function (a2) {
                var _269 = compare(__dict_Ord_10)(a1)(a2);
                if (_269 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _270 = compare(__dict_Ord_11)(a1)(a2);
                if (_270 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _271 = compare(__dict_Ord_12)(a1)(a2);
                if (_271 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _272 = compare(__dict_Ord_13)(a1)(a2);
                if (_272 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = function () {
        return new Category(semigroupoidArr, function (x) {
            return x;
        });
    };
    var boolLikeBoolean = function () {
        return new BoolLike(boolAnd, boolNot, boolOr);
    };
    var eqArray = function (__dict_Eq_7) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean())($eq$eq(eqArray(__dict_Eq_7))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_7))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_9) {
        return new Ord(function () {
            return eqArray(__dict_Ord_9["__superclass_Prelude.Eq_0"]());
        }, function (_27) {
            return function (_28) {
                if (_27.length === 0 && _28.length === 0) {
                    return EQ.value;
                };
                if (_27.length === 0) {
                    return LT.value;
                };
                if (_28.length === 0) {
                    return GT.value;
                };
                if (_27.length >= 1) {
                    var _279 = _27.slice(1);
                    if (_28.length >= 1) {
                        var _277 = _28.slice(1);
                        var _275 = compare(__dict_Ord_9)(_27[0])(_28[0]);
                        if (_275 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_9))(_279)(_277);
                        };
                        return _275;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = function () {
        return new Eq(function (x) {
            return function (y) {
                return not(boolLikeBoolean())($eq$eq(eqOrdering())(x)(y));
            };
        }, function (_20) {
            return function (_21) {
                if (_20 instanceof LT && _21 instanceof LT) {
                    return true;
                };
                if (_20 instanceof GT && _21 instanceof GT) {
                    return true;
                };
                if (_20 instanceof EQ && _21 instanceof EQ) {
                    return true;
                };
                return false;
            };
        });
    };
    var bitsNumber = function () {
        return new Bits(numAnd, numXor, numComplement, numShl, numShr, numZshr, numOr);
    };
    var asTypeOf = function (_12) {
        return function (_13) {
            return _12;
        };
    };
    var applyArr = function () {
        return new Apply(function (f) {
            return function (g) {
                return function (x) {
                    return f(x)(g(x));
                };
            };
        }, functorArr);
    };
    var bindArr = function () {
        return new Bind(function (m) {
            return function (f) {
                return function (x) {
                    return f(m(x))(x);
                };
            };
        }, applyArr);
    };
    var applicativeArr = function () {
        return new Applicative(applyArr, $$const);
    };
    var monadArr = function () {
        return new Monad(applicativeArr, bindArr);
    };
    var ap = function (__dict_Monad_14) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_14)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Bits: Bits, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "||": $bar$bar, 
        "&&": $amp$amp, 
        complement: complement, 
        zshr: zshr, 
        shr: shr, 
        shl: shl, 
        "^": $up, 
        "|": $bar, 
        "&": $amp, 
        ">=": $greater$eq, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "/": $div, 
        "*": $times, 
        "-": $minus, 
        "+": $plus, 
        ap: ap, 
        liftM1: liftM1, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "#": $hash, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        asTypeOf: asTypeOf, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showUnit: showUnit, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        functorArr: functorArr, 
        applyArr: applyArr, 
        applicativeArr: applicativeArr, 
        bindArr: bindArr, 
        monadArr: monadArr, 
        numNumber: numNumber, 
        eqUnit: eqUnit, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        eqBoolean: eqBoolean, 
        eqArray: eqArray, 
        eqOrdering: eqOrdering, 
        showOrdering: showOrdering, 
        ordUnit: ordUnit, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordArray: ordArray, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupUnit: semigroupUnit, 
        semigroupString: semigroupString, 
        semigroupArr: semigroupArr
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var acos = Math.acos;;
    var asin = Math.asin;;
    var atan = Math.atan;;
    function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
    var ceil = Math.ceil;;
    var cos = Math.cos;;
    var exp = Math.exp;;
    var floor = Math.floor;;
    var log = Math.log;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var tan = Math.tan;;
    var e       = Math.E;;
    var ln2     = Math.LN2;;
    var ln10    = Math.LN10;;
    var log2e   = Math.LOG2E;;
    var log10e  = Math.LOG10E;;
    var pi      = Math.PI;;
    var sqrt1_2 = Math.SQRT1_2;;
    var sqrt2   = Math.SQRT2;;
    return {
        sqrt2: sqrt2, 
        sqrt1_2: sqrt1_2, 
        pi: pi, 
        log10e: log10e, 
        log2e: log2e, 
        ln10: ln10, 
        ln2: ln2, 
        e: e, 
        tan: tan, 
        sqrt: sqrt, 
        sin: sin, 
        round: round, 
        pow: pow, 
        min: min, 
        max: max, 
        log: log, 
        floor: floor, 
        exp: exp, 
        cos: cos, 
        ceil: ceil, 
        atan2: atan2, 
        atan: atan, 
        asin: asin, 
        acos: acos, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        runFn10: runFn10, 
        runFn9: runFn9, 
        runFn8: runFn8, 
        runFn7: runFn7, 
        runFn6: runFn6, 
        runFn5: runFn5, 
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2, 
        runFn1: runFn1, 
        runFn0: runFn0, 
        mkFn10: mkFn10, 
        mkFn9: mkFn9, 
        mkFn8: mkFn8, 
        mkFn7: mkFn7, 
        mkFn6: mkFn6, 
        mkFn5: mkFn5, 
        mkFn4: mkFn4, 
        mkFn3: mkFn3, 
        mkFn2: mkFn2, 
        mkFn1: mkFn1, 
        mkFn0: mkFn0, 
        on: on
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_31) {
        return function (_32) {
            return function (_33) {
                return _31(_32)(_33);
            };
        };
    };
    var functorRef = function () {
        return new Prelude.Functor(function (_34) {
            return function (_35) {
                return _34(_35);
            };
        });
    };
    var eqRef = function () {
        return new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    };
    return {
        Ref: Ref, 
        liftRef: liftRef, 
        eqRef: eqRef, 
        functorRef: functorRef
    };
})();
var PS = PS || {};
PS.DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    return {};
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var applicativeEff = function () {
        return new Prelude.Applicative(applyEff, returnE);
    };
    var applyEff = function () {
        return new Prelude.Apply(Prelude.ap(monadEff()), functorEff);
    };
    var monadEff = function () {
        return new Prelude.Monad(applicativeEff, bindEff);
    };
    var bindEff = function () {
        return new Prelude.Bind(bindE, applyEff);
    };
    var functorEff = function () {
        return new Prelude.Functor(Prelude.liftA1(applicativeEff()));
    };
    return {
        foreachE: foreachE, 
        forE: forE, 
        whileE: whileE, 
        untilE: untilE, 
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function newSTArray(len) {  return function(a) {    return function() {      var arr = [];      for (var i = 0; i < len; i++) {        arr[i] = a;      };      return arr;    };  };};
    function peekSTArray(arr) {  return function(i) {    return function() {      return arr[i];    };  };};
    function pokeSTArray(arr) {  return function(i) {    return function(a) {      return function() {        return arr[i] = a;      };    };  };};
    function runST(f) {  return f;};
    function runSTArray(f) {  return f;};
    return {
        runSTArray: runSTArray, 
        runST: runST, 
        pokeSTArray: pokeSTArray, 
        peekSTArray: peekSTArray, 
        newSTArray: newSTArray, 
        writeSTRef: writeSTRef, 
        modifySTRef: modifySTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_15) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_15)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Mario_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function updatePosition(node) {
    return function(coord) {
      return function() {
        node.style.left = coord.x + 'px';
        node.style.bottom = coord.y + 'px';
      };
    };
  }
  ;
    
  function updateSprite(node) {
    return function(url) {
      return function() {
        if (node.src !== url) node.src = url;
      };
    };
  }
  ;
    
  function onDOMContentLoaded(action) {
    if (document.readyState === 'interactive') {
      action();
    } else {
      document.addEventListener('DOMContentLoaded', action);
    }
    return function() { return {}; };
  }
  ;
    function getMario() { return document.getElementById('mario'); };
    return {
        getMario: getMario, 
        onDOMContentLoaded: onDOMContentLoaded, 
        updateSprite: updateSprite, 
        updatePosition: updatePosition
    };
})();
var PS = PS || {};
PS.Signal = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
  };
    
  function lift(fun) {
    return function(sig) {
      var out = constant(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };
    
  function applySig(fun) {
    return function(sig) {
      var out = constant(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };
    
  function merge(sig1) {
    return function(sig2) {
      var out = constant(sig1.get());
      sig1.subscribe(out.set);
      sig2.subscribe(out.set);
      return out;
    };
  };
    
  function foldp(fun) {
    return function(seed) {
      return function(sig) {
        var acc = fun(sig.get())(seed);
        var out = constant(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };
    
  function sampleOn(sig1) {
    return function(sig2) {
      var out = constant(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };
    
  function distinct(eq) {
    return function(sig) {
      var val = sig.get();
      var out = constant(val);
      sig.subscribe(function(newval) {
        if (eq['/='](val, newval)) {
          val = newval;
          out.set(val);
        }
      });
      return out;
    };
  };
    
  function runSignal(sig) {
    return function() {
      sig.subscribe(function(val) {
        val();
      });
      return {};
    };
  };
    
  function unwrap(sig) {
    return function() {
      var out = constant(sig.get()());
      sig.subscribe(function(val) { out.set(val()); });
      return out;
    };
  };
    var $tilde$greater = function (__dict_Functor_16) {
        return Prelude.flip(Prelude["<$>"](__dict_Functor_16));
    };
    var $tilde = function (__dict_Apply_17) {
        return Prelude["<*>"](__dict_Apply_17);
    };
    var $less$tilde = function (__dict_Functor_18) {
        return Prelude["<$>"](__dict_Functor_18);
    };
    var semigroupSignal = function () {
        return new Prelude.Semigroup(merge);
    };
    var functorSignal = function () {
        return new Prelude.Functor(lift);
    };
    var applySignal = function () {
        return new Prelude.Apply(applySig, functorSignal);
    };
    var applicativeSignal = function () {
        return new Prelude.Applicative(applySignal, constant);
    };
    return {
        "~": $tilde, 
        "~>": $tilde$greater, 
        "<~": $less$tilde, 
        unwrap: unwrap, 
        runSignal: runSignal, 
        distinct: distinct, 
        sampleOn: sampleOn, 
        foldp: foldp, 
        merge: merge, 
        applySig: applySig, 
        lift: lift, 
        constant: constant, 
        functorSignal: functorSignal, 
        applySignal: applySignal, 
        applicativeSignal: applicativeSignal, 
        semigroupSignal: semigroupSignal
    };
})();
var PS = PS || {};
PS.Signal_Time = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Signal = PS.Signal;
    
  function every(t) {
    var out = _constant(now());
    setInterval(function() {
      out.set(now());
    }, t);
    return out;
  };
    
  function now() {
    var perf; try { perf = performance; } catch(e) { perf = null; }
    return ((perf && (perf.now ||
                      perf.webkitNow ||
                      perf.msNow ||
                      perf.oNow ||
                      perf.mozNow)) ||
            (process && process.hrtime && function() {
              var t = process.hrtime();
              return (t[0] * 1e9 + t[1]) / 1e6;
            }) || Date.now).call(perf);
  };
    var second = 1000;
    var millisecond = 1;
    var _constant = Signal.constant;
    return {
        now: now, 
        every: every, 
        second: second, 
        millisecond: millisecond
    };
})();
var PS = PS || {};
PS.Signal_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Signal_Time = PS.Signal_Time;
    var Signal = PS.Signal;
    
  function keyPressed(keyCode) {
    return function() {
      var out = _constant(false);
      window.addEventListener('keydown', function(e) {
        if (e.keyCode === keyCode) out.set(true);
      });
      window.addEventListener('keyup', function(e) {
        if (e.keyCode === keyCode) out.set(false);
      });
      return out;
    };
  };
    
  function mousePos() {
    var out = _constant({x:0,y:0});
    window.addEventListener('mousemove', function(e) {
      if (e.pageX !== undefined && e.pageY !== undefined) {
        out.set({x:e.pageX, y: e.pageY});
      } else if (e.clientX !== undefined && e.clientY !== undefined) {
        out.set({
          x: e.clientX + document.body.scrollLeft + 
             document.documentElement.scrollLeft,
          y: e.clientY + document.body.scrollTop + 
             document.documentElement.scrollTop
        });
      } else {
        throw new Error('Mouse event has no coordinates I recognise!');
      }
    });
    return out;
  };
    
  function animationFrame() {
    var requestAnimFrame, cancelAnimFrame;
    if (window.requestAnimationFrame) {
      requestAnimFrame = window.requestAnimationFrame;
      cancelAnimFrame = window.cancelAnimationFrame;
    } else if (window.mozRequestAnimationFrame) {
      requestAnimFrame = window.mozRequestAnimationFrame;
      cancelAnimFrame = window.mozCancelAnimationFrame;
    } else if (window.webkitRequestAnimationFrame) {
      requestAnimFrame = window.webkitRequestAnimationFrame;
      cancelAnimFrame = window.webkitCancelAnimationFrame;
    } else if (window.msRequestAnimationFrame) {
      requestAnimFrame = window.msRequestAnimationFrame;
      cancelAnimFrame = window.msCancelAnimationFrame;
    } else if (window.oRequestAnimationFrame) {
      requestAnimFrame = window.oRequestAnimationFrame;
      cancelAnimFrame = window.oCancelAnimationFrame;
    } else {
      requestAnimFrame = function(cb) {setTimeout(function() {cb(_now())}, 1000/60)};
      cancelAnimFrame = window.clearTimeout;
    }
    var out = _constant(Date.now());
    requestAnimFrame(function tick(t) {
      out.set(t); requestAnimFrame(tick);
    });
    return out;
  };
    var _now = Signal_Time.now;
    var _constant = Signal.constant;
    return {
        animationFrame: animationFrame, 
        mousePos: mousePos, 
        keyPressed: keyPressed
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_19) {
        return function (_41) {
            return function (_42) {
                if (_41) {
                    return _42;
                };
                if (!_41) {
                    return Prelude["return"](__dict_Monad_19)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_20) {
        return function (_43) {
            return function (_44) {
                if (!_43) {
                    return _44;
                };
                if (_43) {
                    return Prelude["return"](__dict_Monad_20)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_21) {
        return function (_36) {
            return function (_37) {
                if (_36 === 0) {
                    return Prelude["return"](__dict_Monad_21)([  ]);
                };
                return Prelude[">>="](__dict_Monad_21["__superclass_Prelude.Bind_1"]())(_37)(function (_4) {
                    return Prelude[">>="](__dict_Monad_21["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_21)(_36 - 1)(_37))(function (_3) {
                        return Prelude["return"](__dict_Monad_21)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_22) {
        return function (_38) {
            return function (_39) {
                return function (_40) {
                    if (_40.length === 0) {
                        return Prelude["return"](__dict_Monad_22)(_39);
                    };
                    if (_40.length >= 1) {
                        var _303 = _40.slice(1);
                        return Prelude[">>="](__dict_Monad_22["__superclass_Prelude.Bind_1"]())(_38(_39)(_40[0]))(function (a$prime) {
                            return foldM(__dict_Monad_22)(_38)(a$prime)(_303);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        unless: unless, 
        when: when, 
        foldM: foldM, 
        replicateM: replicateM
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Lazy(defer) {
        this.defer = defer;
    };
    function Lazy1(defer1) {
        this.defer1 = defer1;
    };
    function Lazy2(defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_23) {
        return function (f) {
            return defer2(__dict_Lazy2_23)(function (_) {
                return f(fix2(__dict_Lazy2_23)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_24) {
        return function (f) {
            return defer1(__dict_Lazy1_24)(function (_) {
                return f(fix1(__dict_Lazy1_24)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_25) {
        return function (f) {
            return defer(__dict_Lazy_25)(function (_) {
                return f(fix(__dict_Lazy_25)(f));
            });
        };
    };
    return {
        Lazy2: Lazy2, 
        Lazy1: Lazy1, 
        Lazy: Lazy, 
        fix2: fix2, 
        fix1: fix1, 
        fix: fix, 
        defer2: defer2, 
        defer1: defer1, 
        defer: defer
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_26) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_26)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_27) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_27)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_28) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_28)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_29) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_29)(w)(w$prime));
                    });
                };
            };
        }, Prelude.functorArr);
    };
    var duplicate = function (__dict_Extend_30) {
        return function (w) {
            return $less$less$eq(__dict_Extend_30)(Prelude.id(Prelude.categoryArr()))(w);
        };
    };
    return {
        Extend: Extend, 
        duplicate: duplicate, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        "<<=": $less$less$eq, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_31) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_31)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_32) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_32)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_33) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_33)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_34) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_34)(m)(Prelude.id(Prelude.categoryArr()));
        };
    };
    var ifM = function (__dict_Bind_35) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_35)(cond)(function (cond$prime) {
                        return cond$prime ? t : f;
                    });
                };
            };
        };
    };
    return {
        ifM: ifM, 
        join: join, 
        "<=<": $less$eq$less, 
        ">=>": $greater$eq$greater, 
        "=<<": $eq$less$less
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_36) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_36)(Prelude["<$>"](__dict_Apply_36["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_37) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr())))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_38) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_40) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_40)(Prelude["<*>"](__dict_Apply_40)(Prelude["<$>"](__dict_Apply_40["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_41) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_41)(Prelude["<$>"](__dict_Apply_41["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_42) {
        return function (a) {
            return $times$greater(__dict_Apply_42)(a)(forever(__dict_Apply_42)(a));
        };
    };
    return {
        forever: forever, 
        lift5: lift5, 
        lift4: lift4, 
        lift3: lift3, 
        lift2: lift2, 
        "*>": $times$greater, 
        "<*": $less$times
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        Alt: Alt, 
        "<|>": $less$bar$greater
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Lazy = PS.Control_Lazy;
    function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var many = function (__dict_Alternative_43) {
        return function (__dict_Lazy1_44) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_43["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_43)(__dict_Lazy1_44)(v))(Prelude.pure(__dict_Alternative_43["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    var some = function (__dict_Alternative_45) {
        return function (__dict_Lazy1_46) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_45["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_45["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_46)(function (_) {
                    return many(__dict_Alternative_45)(__dict_Lazy1_46)(v);
                }));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_47) {
        return function (_45) {
            if (_45) {
                return Prelude["return"](__dict_MonadPlus_47["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_45) {
                return Control_Plus.empty((__dict_MonadPlus_47["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var showEither = function (__dict_Show_48) {
        return function (__dict_Show_49) {
            return new Prelude.Show(function (_55) {
                if (_55 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_48)(_55.value0) + ")");
                };
                if (_55 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_49)(_55.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = function () {
        return new Prelude.Functor(function (_49) {
            return function (_50) {
                if (_50 instanceof Left) {
                    return new Left(_50.value0);
                };
                if (_50 instanceof Right) {
                    return new Right(_49(_50.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqEither = function (__dict_Eq_52) {
        return function (__dict_Eq_53) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_52)(__dict_Eq_53))(a)(b);
                };
            }, function (_56) {
                return function (_57) {
                    if (_56 instanceof Left && _57 instanceof Left) {
                        return Prelude["=="](__dict_Eq_52)(_56.value0)(_57.value0);
                    };
                    if (_56 instanceof Right && _57 instanceof Right) {
                        return Prelude["=="](__dict_Eq_53)(_56.value0)(_57.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_50) {
        return function (__dict_Ord_51) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_50["__superclass_Prelude.Eq_0"]())(__dict_Ord_51["__superclass_Prelude.Eq_0"]());
            }, function (_58) {
                return function (_59) {
                    if (_58 instanceof Left && _59 instanceof Left) {
                        return Prelude.compare(__dict_Ord_50)(_58.value0)(_59.value0);
                    };
                    if (_58 instanceof Right && _59 instanceof Right) {
                        return Prelude.compare(__dict_Ord_51)(_58.value0)(_59.value0);
                    };
                    if (_58 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_59 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (_46) {
        return function (_47) {
            return function (_48) {
                if (_48 instanceof Left) {
                    return _46(_48.value0);
                };
                if (_48 instanceof Right) {
                    return _47(_48.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = function () {
        return new Prelude.Apply(function (_51) {
            return function (_52) {
                if (_51 instanceof Left) {
                    return new Left(_51.value0);
                };
                if (_51 instanceof Right) {
                    return Prelude["<$>"](functorEither())(_51.value0)(_52);
                };
                throw new Error("Failed pattern match");
            };
        }, functorEither);
    };
    var bindEither = function () {
        return new Prelude.Bind(either(function (e) {
            return function (_) {
                return new Left(e);
            };
        })(function (a) {
            return function (f) {
                return f(a);
            };
        }), applyEither);
    };
    var applicativeEither = function () {
        return new Prelude.Applicative(applyEither, Right.create);
    };
    var monadEither = function () {
        return new Prelude.Monad(applicativeEither, bindEither);
    };
    var altEither = function () {
        return new Control_Alt.Alt(function (_53) {
            return function (_54) {
                if (_53 instanceof Left) {
                    return _54;
                };
                return _53;
            };
        }, functorEither);
    };
    return {
        Left: Left, 
        Right: Right, 
        isRight: isRight, 
        isLeft: isLeft, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        altEither: altEither, 
        bindEither: bindEither, 
        monadEither: monadEither, 
        showEither: showEither, 
        eqEither: eqEither, 
        ordEither: ordEither
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var showMaybe = function (__dict_Show_54) {
        return new Prelude.Show(function (_75) {
            if (_75 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_54)(_75.value0) + ")");
            };
            if (_75 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_55) {
        return new Prelude.Semigroup(function (_73) {
            return function (_74) {
                if (_73 instanceof Nothing) {
                    return _74;
                };
                if (_74 instanceof Nothing) {
                    return _73;
                };
                if (_73 instanceof Just && _74 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_55)(_73.value0)(_74.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_60) {
        return function (_61) {
            return function (_62) {
                if (_62 instanceof Nothing) {
                    return _60;
                };
                if (_62 instanceof Just) {
                    return _61(_62.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = function () {
        return new Prelude.Functor(function (_63) {
            return function (_64) {
                if (_64 instanceof Just) {
                    return new Just(_63(_64.value0));
                };
                return Nothing.value;
            };
        });
    };
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr()));
    };
    var extendMaybe = function () {
        return new Control_Extend.Extend(function (_71) {
            return function (_72) {
                if (_72 instanceof Nothing) {
                    return Nothing.value;
                };
                return Just.create(_71(_72));
            };
        }, functorMaybe);
    };
    var eqMaybe = function (__dict_Eq_57) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_57))(a)(b);
            };
        }, function (_76) {
            return function (_77) {
                if (_76 instanceof Nothing && _77 instanceof Nothing) {
                    return true;
                };
                if (_76 instanceof Just && _77 instanceof Just) {
                    return Prelude["=="](__dict_Eq_57)(_76.value0)(_77.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_56) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_56["__superclass_Prelude.Eq_0"]());
        }, function (_78) {
            return function (_79) {
                if (_78 instanceof Just && _79 instanceof Just) {
                    return Prelude.compare(__dict_Ord_56)(_78.value0)(_79.value0);
                };
                if (_78 instanceof Nothing && _79 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_78 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_79 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = function () {
        return new Prelude.Apply(function (_65) {
            return function (_66) {
                if (_65 instanceof Just) {
                    return Prelude["<$>"](functorMaybe())(_65.value0)(_66);
                };
                if (_65 instanceof Nothing) {
                    return Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        }, functorMaybe);
    };
    var bindMaybe = function () {
        return new Prelude.Bind(function (_69) {
            return function (_70) {
                if (_69 instanceof Just) {
                    return _70(_69.value0);
                };
                if (_69 instanceof Nothing) {
                    return Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        }, applyMaybe);
    };
    var applicativeMaybe = function () {
        return new Prelude.Applicative(applyMaybe, Just.create);
    };
    var monadMaybe = function () {
        return new Prelude.Monad(applicativeMaybe, bindMaybe);
    };
    var altMaybe = function () {
        return new Control_Alt.Alt(function (_67) {
            return function (_68) {
                if (_67 instanceof Nothing) {
                    return _68;
                };
                return _67;
            };
        }, functorMaybe);
    };
    var plusMaybe = function () {
        return new Control_Plus.Plus(altMaybe, Nothing.value);
    };
    var alternativeMaybe = function () {
        return new Control_Alternative.Alternative(plusMaybe, applicativeMaybe);
    };
    var monadPlusMaybe = function () {
        return new Control_MonadPlus.MonadPlus(alternativeMaybe, monadMaybe);
    };
    return {
        Nothing: Nothing, 
        Just: Just, 
        isNothing: isNothing, 
        isJust: isJust, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        altMaybe: altMaybe, 
        plusMaybe: plusMaybe, 
        alternativeMaybe: alternativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        extendMaybe: extendMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe, 
        eqMaybe: eqMaybe, 
        ordMaybe: ordMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_82) {
        if (_82.length >= 1) {
            var _371 = _82.slice(1);
            return new Data_Maybe.Just(_371);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy__98) {
            return function (__copy__99) {
                return function (__copy__100) {
                    var _98 = __copy__98;
                    var _99 = __copy__99;
                    var _100 = __copy__100;
                    tco: while (true) {
                        if (_100.length >= 1) {
                            var _376 = _100.slice(1);
                            if (_99(_100[0])) {
                                var __tco__98 = Prelude[":"](_100[0])(_98);
                                var __tco__99 = _99;
                                _98 = __tco__98;
                                _99 = __tco__99;
                                _100 = _376;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_98), 
                            rest: _100
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _377 = comp(x)(y);
                    if (_377 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_377 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_377 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_58) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_58))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = function () {
        return new Prelude.Semigroup(append);
    };
    var $$null = function (_84) {
        if (_84.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function (_91) {
        return function (_92) {
            if (_92.length === 0) {
                return [  ];
            };
            if (_92.length >= 1) {
                var _382 = _92.slice(1);
                return Prelude[":"](_92[0])(nubBy(_91)(filter(function (y) {
                    return !_91(_92[0])(y);
                })(_382)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_59) {
        return nubBy(Prelude["=="](__dict_Eq_59));
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr())(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (__copy__81) {
        var _81 = __copy__81;
        tco: while (true) {
            if (_81.length >= 1) {
                var _385 = _81.slice(1);
                if (_385.length === 0) {
                    return new Data_Maybe.Just(_81[0]);
                };
            };
            if (_81.length >= 1) {
                var _387 = _81.slice(1);
                _81 = _387;
                continue tco;
            };
            return Data_Maybe.Nothing.value;
        };
    };
    var intersectBy = function (_88) {
        return function (_89) {
            return function (_90) {
                if (_89.length === 0) {
                    return [  ];
                };
                if (_90.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_88(x))(_90) >= 0;
                };
                return filter(el)(_89);
            };
        };
    };
    var intersect = function (__dict_Eq_60) {
        return intersectBy(Prelude["=="](__dict_Eq_60));
    };
    var init = function (_83) {
        if (_83.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_83) - 1)(_83));
    };
    var head = function (_80) {
        if (_80.length >= 1) {
            var _394 = _80.slice(1);
            return new Data_Maybe.Just(_80[0]);
        };
        return Data_Maybe.Nothing.value;
    };
    var groupBy = (function () {
        var go = function (__copy__95) {
            return function (__copy__96) {
                return function (__copy__97) {
                    var _95 = __copy__95;
                    var _96 = __copy__96;
                    var _97 = __copy__97;
                    tco: while (true) {
                        if (_97.length === 0) {
                            return reverse(_95);
                        };
                        if (_97.length >= 1) {
                            var _399 = _97.slice(1);
                            var sp = span(_96(_97[0]))(_399);
                            var __tco__95 = Prelude[":"](Prelude[":"](_97[0])(sp.init))(_95);
                            var __tco__96 = _96;
                            _95 = __tco__95;
                            _96 = __tco__96;
                            _97 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_61) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_61))(xs);
        };
    };
    var group$prime = function (__dict_Ord_62) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(group(__dict_Ord_62["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_62));
    };
    var functorArray = function () {
        return new Prelude.Functor(map);
    };
    var elemLastIndex = function (__dict_Eq_63) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_63)(x));
        };
    };
    var elemIndex = function (__dict_Eq_64) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_64)(x));
        };
    };
    var deleteBy = function (_85) {
        return function (_86) {
            return function (_87) {
                if (_87.length === 0) {
                    return [  ];
                };
                var _403 = findIndex(_85(_86))(_87);
                if (_403 < 0) {
                    return _87;
                };
                return deleteAt(_403)(1)(_87);
            };
        };
    };
    var $$delete = function (__dict_Eq_65) {
        return deleteBy(Prelude["=="](__dict_Eq_65));
    };
    var $bslash$bslash = function (__dict_Eq_66) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__93) {
                    return function (__copy__94) {
                        var _93 = __copy__93;
                        var _94 = __copy__94;
                        tco: while (true) {
                            if (_94.length === 0) {
                                return _93;
                            };
                            if (_93.length === 0) {
                                return [  ];
                            };
                            if (_94.length >= 1) {
                                var _407 = _94.slice(1);
                                var __tco__93 = $$delete(__dict_Eq_66)(_94[0])(_93);
                                _93 = __tco__93;
                                _94 = _407;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var applicativeArray = function () {
        return new Prelude.Applicative(applyArray, singleton);
    };
    var applyArray = function () {
        return new Prelude.Apply(Prelude.ap(monadArray()), functorArray);
    };
    var monadArray = function () {
        return new Prelude.Monad(applicativeArray, bindArray);
    };
    var bindArray = function () {
        return new Prelude.Bind(Prelude.flip(concatMap), applyArray);
    };
    var altArray = function () {
        return new Control_Alt.Alt(append, functorArray);
    };
    var plusArray = function () {
        return new Control_Plus.Plus(altArray, [  ]);
    };
    var alternativeArray = function () {
        return new Control_Alternative.Alternative(plusArray, applicativeArray);
    };
    var monadPlusArray = function () {
        return new Control_MonadPlus.MonadPlus(alternativeArray, monadArray);
    };
    return {
        span: span, 
        groupBy: groupBy, 
        "group'": group$prime, 
        group: group, 
        sortBy: sortBy, 
        sort: sort, 
        nubBy: nubBy, 
        nub: nub, 
        zipWith: zipWith, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        "\\\\": $bslash$bslash, 
        "delete": $$delete, 
        deleteBy: deleteBy, 
        updateAt: updateAt, 
        deleteAt: deleteAt, 
        insertAt: insertAt, 
        take: take, 
        drop: drop, 
        reverse: reverse, 
        concat: concat, 
        append: append, 
        elemLastIndex: elemLastIndex, 
        elemIndex: elemIndex, 
        findLastIndex: findLastIndex, 
        findIndex: findIndex, 
        length: length, 
        catMaybes: catMaybes, 
        mapMaybe: mapMaybe, 
        map: map, 
        "null": $$null, 
        init: init, 
        tail: tail, 
        last: last, 
        head: head, 
        singleton: singleton, 
        snoc: snoc, 
        "..": $dot$dot, 
        "!!": $bang$bang, 
        functorArray: functorArray, 
        applyArray: applyArray, 
        applicativeArray: applicativeArray, 
        bindArray: bindArray, 
        monadArray: monadArray, 
        semigroupArray: semigroupArray, 
        altArray: altArray, 
        plusArray: plusArray, 
        alternativeArray: alternativeArray, 
        monadPlusArray: monadPlusArray
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_101) {
        if (_101 instanceof Data_Maybe.Just) {
            return _101.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var tail = function (_103) {
        if (_103.length >= 1) {
            var _412 = _103.slice(1);
            return _412;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr())(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (_102) {
        if (_102.length >= 1) {
            var _415 = _102.slice(1);
            return _102[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        init: init, 
        last: last, 
        tail: tail, 
        head: head
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = function () {
        return new Monoid(Prelude.semigroupUnit, Prelude.unit);
    };
    var monoidString = function () {
        return new Monoid(Prelude.semigroupString, "");
    };
    var monoidMaybe = function (__dict_Semigroup_67) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_67);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = function () {
        return new Monoid(Data_Array.semigroupArray, [  ]);
    };
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_68) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_68["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_68)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidString: monoidString, 
        monoidArray: monoidArray, 
        monoidUnit: monoidUnit, 
        monoidArr: monoidArr, 
        monoidMaybe: monoidMaybe
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = {
        create: function (value) {
            return value;
        }
    };
    var showAll = function () {
        return new Prelude.Show(function (_109) {
            return "All (" + (Prelude.show(Prelude.showBoolean())(_109) + ")");
        });
    };
    var semigroupAll = function () {
        return new Prelude.Semigroup(function (_110) {
            return function (_111) {
                return _110 && _111;
            };
        });
    };
    var runAll = function (_104) {
        return _104;
    };
    var monoidAll = function () {
        return new Data_Monoid.Monoid(semigroupAll, true);
    };
    var eqAll = function () {
        return new Prelude.Eq(function (_107) {
            return function (_108) {
                return _107 !== _108;
            };
        }, function (_105) {
            return function (_106) {
                return _105 === _106;
            };
        });
    };
    return {
        All: All, 
        runAll: runAll, 
        eqAll: eqAll, 
        showAll: showAll, 
        semigroupAll: semigroupAll, 
        monoidAll: monoidAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = {
        create: function (value) {
            return value;
        }
    };
    var showAny = function () {
        return new Prelude.Show(function (_117) {
            return "Any (" + (Prelude.show(Prelude.showBoolean())(_117) + ")");
        });
    };
    var semigroupAny = function () {
        return new Prelude.Semigroup(function (_118) {
            return function (_119) {
                return _118 || _119;
            };
        });
    };
    var runAny = function (_112) {
        return _112;
    };
    var monoidAny = function () {
        return new Data_Monoid.Monoid(semigroupAny, false);
    };
    var eqAny = function () {
        return new Prelude.Eq(function (_115) {
            return function (_116) {
                return _115 !== _116;
            };
        }, function (_113) {
            return function (_114) {
                return _113 === _114;
            };
        });
    };
    return {
        Any: Any, 
        runAny: runAny, 
        eqAny: eqAny, 
        showAny: showAny, 
        semigroupAny: semigroupAny, 
        monoidAny: monoidAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Dual = {
        create: function (value) {
            return value;
        }
    };
    var showDual = function (__dict_Show_69) {
        return new Prelude.Show(function (_127) {
            return "Dual (" + (Prelude.show(__dict_Show_69)(_127) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_70) {
        return new Prelude.Semigroup(function (_128) {
            return function (_129) {
                return Prelude["<>"](__dict_Semigroup_70)(_129)(_128);
            };
        });
    };
    var runDual = function (_120) {
        return _120;
    };
    var monoidDual = function (__dict_Monoid_72) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_72["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_72));
    };
    var eqDual = function (__dict_Eq_73) {
        return new Prelude.Eq(function (_123) {
            return function (_124) {
                return Prelude["/="](__dict_Eq_73)(_123)(_124);
            };
        }, function (_121) {
            return function (_122) {
                return Prelude["=="](__dict_Eq_73)(_121)(_122);
            };
        });
    };
    var ordDual = function (__dict_Ord_71) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_71["__superclass_Prelude.Eq_0"]());
        }, function (_125) {
            return function (_126) {
                return Prelude.compare(__dict_Ord_71)(_125)(_126);
            };
        });
    };
    return {
        Dual: Dual, 
        runDual: runDual, 
        eqDual: eqDual, 
        ordDual: ordDual, 
        showDual: showDual, 
        semigroupDual: semigroupDual, 
        monoidDual: monoidDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = {
        create: function (value) {
            return value;
        }
    };
    var semigroupEndo = function () {
        return new Prelude.Semigroup(function (_131) {
            return function (_132) {
                return Prelude["<<<"](Prelude.semigroupoidArr())(_131)(_132);
            };
        });
    };
    var runEndo = function (_130) {
        return _130;
    };
    var monoidEndo = function () {
        return new Data_Monoid.Monoid(semigroupEndo, Prelude.id(Prelude.categoryArr()));
    };
    return {
        Endo: Endo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo, 
        monoidEndo: monoidEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Product = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Product = {
        create: function (value) {
            return value;
        }
    };
    var showProduct = function () {
        return new Prelude.Show(function (_140) {
            return "Product (" + (Prelude.show(Prelude.showNumber())(_140) + ")");
        });
    };
    var semigroupProduct = function () {
        return new Prelude.Semigroup(function (_141) {
            return function (_142) {
                return _141 * _142;
            };
        });
    };
    var runProduct = function (_133) {
        return _133;
    };
    var monoidProduct = function () {
        return new Data_Monoid.Monoid(semigroupProduct, 1);
    };
    var eqProduct = function () {
        return new Prelude.Eq(function (_136) {
            return function (_137) {
                return _136 !== _137;
            };
        }, function (_134) {
            return function (_135) {
                return _134 === _135;
            };
        });
    };
    var ordProduct = function () {
        return new Prelude.Ord(eqProduct, function (_138) {
            return function (_139) {
                return Prelude.compare(Prelude.ordNumber())(_138)(_139);
            };
        });
    };
    return {
        Product: Product, 
        runProduct: runProduct, 
        eqProduct: eqProduct, 
        ordProduct: ordProduct, 
        showProduct: showProduct, 
        semigroupProduct: semigroupProduct, 
        monoidProduct: monoidProduct
    };
})();
var PS = PS || {};
PS.Data_Monoid_Sum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Sum = {
        create: function (value) {
            return value;
        }
    };
    var showSum = function () {
        return new Prelude.Show(function (_150) {
            return "Sum (" + (Prelude.show(Prelude.showNumber())(_150) + ")");
        });
    };
    var semigroupSum = function () {
        return new Prelude.Semigroup(function (_151) {
            return function (_152) {
                return _151 + _152;
            };
        });
    };
    var runSum = function (_143) {
        return _143;
    };
    var monoidSum = function () {
        return new Data_Monoid.Monoid(semigroupSum, 0);
    };
    var eqSum = function () {
        return new Prelude.Eq(function (_146) {
            return function (_147) {
                return _146 !== _147;
            };
        }, function (_144) {
            return function (_145) {
                return _144 === _145;
            };
        });
    };
    var ordSum = function () {
        return new Prelude.Ord(eqSum, function (_148) {
            return function (_149) {
                return Prelude.compare(Prelude.ordNumber())(_148)(_149);
            };
        });
    };
    return {
        Sum: Sum, 
        runSum: runSum, 
        eqSum: eqSum, 
        ordSum: ordSum, 
        showSum: showSum, 
        semigroupSum: semigroupSum, 
        monoidSum: monoidSum
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_157) {
        if (_157.length >= 1) {
            var _472 = _157.slice(1);
            var _466 = unzip(_472);
            return new Tuple(Prelude[":"]((_157[0]).value0)(_466.value0), Prelude[":"]((_157[0]).value1)(_466.value1));
        };
        if (_157.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_155) {
        return function (_156) {
            return _155(_156.value0)(_156.value1);
        };
    };
    var swap = function (_158) {
        return new Tuple(_158.value1, _158.value0);
    };
    var snd = function (_154) {
        return _154.value1;
    };
    var showTuple = function (__dict_Show_74) {
        return function (__dict_Show_75) {
            return new Prelude.Show(function (_159) {
                return "Tuple (" + (Prelude.show(__dict_Show_74)(_159.value0) + (") (" + (Prelude.show(__dict_Show_75)(_159.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = function () {
        return new Prelude.Semigroupoid(function (_164) {
            return function (_165) {
                return new Tuple(_165.value0, _164.value1);
            };
        });
    };
    var semigroupTuple = function (__dict_Semigroup_76) {
        return function (__dict_Semigroup_77) {
            return new Prelude.Semigroup(function (_166) {
                return function (_167) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_76)(_166.value0)(_167.value0), Prelude["<>"](__dict_Semigroup_77)(_166.value1)(_167.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_80) {
        return function (__dict_Monoid_81) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_80["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_81["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_80), Data_Monoid.mempty(__dict_Monoid_81)));
        };
    };
    var functorTuple = function () {
        return new Prelude.Functor(function (_168) {
            return function (_169) {
                return new Tuple(_169.value0, _168(_169.value1));
            };
        });
    };
    var fst = function (_153) {
        return _153.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_83) {
        return function (__dict_Lazy1_84) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_83)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_84)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_85) {
        return function (__dict_Lazy2_86) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_85)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_86)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_87) {
        return function (__dict_Lazy_88) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_87)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_88)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = function () {
        return new Control_Extend.Extend(function (_174) {
            return function (_175) {
                return new Tuple(_175.value0, _174(_175));
            };
        }, functorTuple);
    };
    var eqTuple = function (__dict_Eq_89) {
        return function (__dict_Eq_90) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_89)(__dict_Eq_90))(t1)(t2);
                };
            }, function (_160) {
                return function (_161) {
                    return Prelude["=="](__dict_Eq_89)(_160.value0)(_161.value0) && Prelude["=="](__dict_Eq_90)(_160.value1)(_161.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_78) {
        return function (__dict_Ord_79) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_78["__superclass_Prelude.Eq_0"]())(__dict_Ord_79["__superclass_Prelude.Eq_0"]());
            }, function (_162) {
                return function (_163) {
                    var _517 = Prelude.compare(__dict_Ord_78)(_162.value0)(_163.value0);
                    if (_517 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_79)(_162.value1)(_163.value1);
                    };
                    return _517;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = function () {
        return new Control_Comonad.Comonad(extendTuple, snd);
    };
    var applyTuple = function (__dict_Semigroup_92) {
        return new Prelude.Apply(function (_170) {
            return function (_171) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_92)(_170.value0)(_171.value0), _170.value1(_171.value1));
            };
        }, functorTuple);
    };
    var bindTuple = function (__dict_Semigroup_91) {
        return new Prelude.Bind(function (_172) {
            return function (_173) {
                var _530 = _173(_172.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_91)(_172.value0)(_530.value0), _530.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_91);
        });
    };
    var applicativeTuple = function (__dict_Monoid_93) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_93["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_93)));
    };
    var monadTuple = function (__dict_Monoid_82) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_82);
        }, function () {
            return bindTuple(__dict_Monoid_82["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        swap: swap, 
        unzip: unzip, 
        zip: zip, 
        uncurry: uncurry, 
        curry: curry, 
        snd: snd, 
        fst: fst, 
        showTuple: showTuple, 
        eqTuple: eqTuple, 
        ordTuple: ordTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        semigroupTuple: semigroupTuple, 
        monoidTuple: monoidTuple, 
        functorTuple: functorTuple, 
        applyTuple: applyTuple, 
        applicativeTuple: applicativeTuple, 
        bindTuple: bindTuple, 
        monadTuple: monadTuple, 
        extendTuple: extendTuple, 
        comonadTuple: comonadTuple, 
        lazyTuple: lazyTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = {
        create: function (value) {
            return value;
        }
    };
    var showFirst = function (__dict_Show_94) {
        return new Prelude.Show(function (_183) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_94))(_183) + ")");
        });
    };
    var semigroupFirst = function () {
        return new Prelude.Semigroup(function (_184) {
            return function (_185) {
                if (_184 instanceof Data_Maybe.Just) {
                    return _184;
                };
                return _185;
            };
        });
    };
    var runFirst = function (_176) {
        return _176;
    };
    var monoidFirst = function () {
        return new Data_Monoid.Monoid(semigroupFirst, Data_Maybe.Nothing.value);
    };
    var eqFirst = function (__dict_Eq_96) {
        return new Prelude.Eq(function (_179) {
            return function (_180) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_96))(_179)(_180);
            };
        }, function (_177) {
            return function (_178) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_96))(_177)(_178);
            };
        });
    };
    var ordFirst = function (__dict_Ord_95) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_95["__superclass_Prelude.Eq_0"]());
        }, function (_181) {
            return function (_182) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_95))(_181)(_182);
            };
        });
    };
    return {
        First: First, 
        runFirst: runFirst, 
        eqFirst: eqFirst, 
        ordFirst: ordFirst, 
        showFirst: showFirst, 
        semigroupFirst: semigroupFirst, 
        monoidFirst: monoidFirst
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Monoid_First = PS.Data_Monoid_First;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    function foldrArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = xs.length - 1; i >= 0; --i) {        acc = f(xs[i])(acc);      }      return acc;    }  }};
    function foldlArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = 0, len = xs.length; i < len; ++i) {        acc = f(acc)(xs[i]);      }      return acc;    }  }};
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_97) {
        return function (__dict_Foldable_98) {
            return function (f) {
                return foldr(__dict_Foldable_98)(Prelude["<<<"](Prelude.semigroupoidArr())(Control_Apply["*>"](__dict_Applicative_97["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_97)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_99) {
        return function (__dict_Foldable_100) {
            return Prelude.flip(traverse_(__dict_Applicative_99)(__dict_Foldable_100));
        };
    };
    var sequence_ = function (__dict_Applicative_101) {
        return function (__dict_Foldable_102) {
            return traverse_(__dict_Applicative_101)(__dict_Foldable_102)(Prelude.id(Prelude.categoryArr()));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var mconcat = function (__dict_Foldable_103) {
        return function (__dict_Monoid_104) {
            return foldl(__dict_Foldable_103)(Prelude["<>"](__dict_Monoid_104["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_104));
        };
    };
    var or = function (__dict_Foldable_105) {
        return foldl(__dict_Foldable_105)(Prelude["||"](Prelude.boolLikeBoolean()))(false);
    };
    var product = function (__dict_Foldable_106) {
        return foldl(__dict_Foldable_106)(Prelude["*"](Prelude.numNumber()))(1);
    };
    var sum = function (__dict_Foldable_107) {
        return foldl(__dict_Foldable_107)(Prelude["+"](Prelude.numNumber()))(0);
    };
    var foldableTuple = function () {
        return new Foldable(function (__dict_Monoid_108) {
            return function (_217) {
                return function (_218) {
                    return _217(_218.value1);
                };
            };
        }, function (_214) {
            return function (_215) {
                return function (_216) {
                    return _214(_215)(_216.value1);
                };
            };
        }, function (_211) {
            return function (_212) {
                return function (_213) {
                    return _211(_213.value1)(_212);
                };
            };
        });
    };
    var foldableRef = function () {
        return new Foldable(function (__dict_Monoid_109) {
            return function (_209) {
                return function (_210) {
                    return _209(_210);
                };
            };
        }, function (_206) {
            return function (_207) {
                return function (_208) {
                    return _206(_207)(_208);
                };
            };
        }, function (_203) {
            return function (_204) {
                return function (_205) {
                    return _203(_205)(_204);
                };
            };
        });
    };
    var foldableMaybe = function () {
        return new Foldable(function (__dict_Monoid_110) {
            return function (_201) {
                return function (_202) {
                    if (_202 instanceof Data_Maybe.Nothing) {
                        return Data_Monoid.mempty(__dict_Monoid_110);
                    };
                    if (_202 instanceof Data_Maybe.Just) {
                        return _201(_202.value0);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        }, function (_198) {
            return function (_199) {
                return function (_200) {
                    if (_200 instanceof Data_Maybe.Nothing) {
                        return _199;
                    };
                    if (_200 instanceof Data_Maybe.Just) {
                        return _198(_199)(_200.value0);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        }, function (_195) {
            return function (_196) {
                return function (_197) {
                    if (_197 instanceof Data_Maybe.Nothing) {
                        return _196;
                    };
                    if (_197 instanceof Data_Maybe.Just) {
                        return _195(_197.value0)(_196);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    var foldableEither = function () {
        return new Foldable(function (__dict_Monoid_111) {
            return function (_193) {
                return function (_194) {
                    if (_194 instanceof Data_Either.Left) {
                        return Data_Monoid.mempty(__dict_Monoid_111);
                    };
                    if (_194 instanceof Data_Either.Right) {
                        return _193(_194.value0);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        }, function (_190) {
            return function (_191) {
                return function (_192) {
                    if (_192 instanceof Data_Either.Left) {
                        return _191;
                    };
                    if (_192 instanceof Data_Either.Right) {
                        return _190(_191)(_192.value0);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        }, function (_187) {
            return function (_188) {
                return function (_189) {
                    if (_189 instanceof Data_Either.Left) {
                        return _188;
                    };
                    if (_189 instanceof Data_Either.Right) {
                        return _187(_189.value0)(_188);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    var foldableArray = function () {
        return new Foldable(function (__dict_Monoid_112) {
            return function (f) {
                return function (xs) {
                    return foldr(foldableArray())(function (x) {
                        return function (acc) {
                            return Prelude["<>"](__dict_Monoid_112["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                        };
                    })(Data_Monoid.mempty(__dict_Monoid_112))(xs);
                };
            };
        }, function (f) {
            return function (z) {
                return function (xs) {
                    return foldlArray(f)(z)(xs);
                };
            };
        }, function (f) {
            return function (z) {
                return function (xs) {
                    return foldrArray(f)(z)(xs);
                };
            };
        });
    };
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var lookup = function (__dict_Eq_113) {
        return function (__dict_Foldable_114) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_114)(Data_Monoid_First.monoidFirst())(function (_186) {
                        return Prelude["=="](__dict_Eq_113)(a)(_186.value0) ? new Data_Maybe.Just(_186.value1) : Data_Maybe.Nothing.value;
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_115) {
        return function (__dict_Monoid_116) {
            return foldMap(__dict_Foldable_115)(__dict_Monoid_116)(Prelude.id(Prelude.categoryArr()));
        };
    };
    var find = function (__dict_Foldable_117) {
        return function (p) {
            return function (f) {
                var _596 = foldMap(__dict_Foldable_117)(Data_Monoid.monoidArray())(function (x) {
                    return p(x) ? [ x ] : [  ];
                })(f);
                if (_596.length >= 1) {
                    var _598 = _596.slice(1);
                    return new Data_Maybe.Just(_596[0]);
                };
                if (_596.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_118) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr())(or(foldableArray()))(foldMap(__dict_Foldable_118)(Data_Monoid.monoidArray())(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_119) {
        return function (__dict_Foldable_120) {
            return Prelude["<<<"](Prelude.semigroupoidArr())(any(__dict_Foldable_120))(Prelude["=="](__dict_Eq_119));
        };
    };
    var notElem = function (__dict_Eq_121) {
        return function (__dict_Foldable_122) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr())(Prelude.not(Prelude.boolLikeBoolean()))(elem(__dict_Eq_121)(__dict_Foldable_122)(x));
            };
        };
    };
    var and = function (__dict_Foldable_123) {
        return foldl(__dict_Foldable_123)(Prelude["&&"](Prelude.boolLikeBoolean()))(true);
    };
    var all = function (__dict_Foldable_124) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr())(and(foldableArray()))(foldMap(__dict_Foldable_124)(Data_Monoid.monoidArray())(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        lookup: lookup, 
        find: find, 
        notElem: notElem, 
        elem: elem, 
        product: product, 
        sum: sum, 
        all: all, 
        any: any, 
        or: or, 
        and: and, 
        mconcat: mconcat, 
        sequence_: sequence_, 
        for_: for_, 
        traverse_: traverse_, 
        fold: fold, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableRef: foldableRef, 
        foldableTuple: foldableTuple
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = {
        create: function (value) {
            return value;
        }
    };
    var showLast = function (__dict_Show_125) {
        return new Prelude.Show(function (_226) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_125))(_226) + ")");
        });
    };
    var semigroupLast = function () {
        return new Prelude.Semigroup(function (_227) {
            return function (_228) {
                if (_228 instanceof Data_Maybe.Just) {
                    return _228;
                };
                if (_228 instanceof Data_Maybe.Nothing) {
                    return _227;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var runLast = function (_219) {
        return _219;
    };
    var monoidLast = function () {
        return new Data_Monoid.Monoid(semigroupLast, Data_Maybe.Nothing.value);
    };
    var eqLast = function (__dict_Eq_127) {
        return new Prelude.Eq(function (_222) {
            return function (_223) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_127))(_222)(_223);
            };
        }, function (_220) {
            return function (_221) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_127))(_220)(_221);
            };
        });
    };
    var ordLast = function (__dict_Ord_126) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_126["__superclass_Prelude.Eq_0"]());
        }, function (_224) {
            return function (_225) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_126))(_224)(_225);
            };
        });
    };
    return {
        Last: Last, 
        runLast: runLast, 
        eqLast: eqLast, 
        ordLast: ordLast, 
        showLast: showLast, 
        semigroupLast: semigroupLast, 
        monoidLast: monoidLast
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Data_Tuple = PS.Data_Tuple;
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Data_Array = PS.Data_Array;
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = function () {
        return new Traversable(Data_Foldable.foldableTuple, Data_Tuple.functorTuple, function (__dict_Applicative_129) {
            return function (_243) {
                return Prelude["<$>"]((__dict_Applicative_129["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_243.value0))(_243.value1);
            };
        }, function (__dict_Applicative_128) {
            return function (_241) {
                return function (_242) {
                    return Prelude["<$>"]((__dict_Applicative_128["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_242.value0))(_241(_242.value1));
                };
            };
        });
    };
    var traversableRef = function () {
        return new Traversable(Data_Foldable.foldableRef, Data_Eq.functorRef, function (__dict_Applicative_131) {
            return function (_237) {
                return Prelude["<$>"]((__dict_Applicative_131["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_237);
            };
        }, function (__dict_Applicative_130) {
            return function (_235) {
                return function (_236) {
                    return Prelude["<$>"]((__dict_Applicative_130["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_235(_236));
                };
            };
        });
    };
    var traversableMaybe = function () {
        return new Traversable(Data_Foldable.foldableMaybe, Data_Maybe.functorMaybe, function (__dict_Applicative_133) {
            return function (_240) {
                if (_240 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_133)(Data_Maybe.Nothing.value);
                };
                if (_240 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_133["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_240.value0);
                };
                throw new Error("Failed pattern match");
            };
        }, function (__dict_Applicative_132) {
            return function (_238) {
                return function (_239) {
                    if (_239 instanceof Data_Maybe.Nothing) {
                        return Prelude.pure(__dict_Applicative_132)(Data_Maybe.Nothing.value);
                    };
                    if (_239 instanceof Data_Maybe.Just) {
                        return Prelude["<$>"]((__dict_Applicative_132["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_238(_239.value0));
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    var traversableEither = function () {
        return new Traversable(Data_Foldable.foldableEither, Data_Either.functorEither, function (__dict_Applicative_135) {
            return function (_234) {
                if (_234 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_135)(new Data_Either.Left(_234.value0));
                };
                if (_234 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_135["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_234.value0);
                };
                throw new Error("Failed pattern match");
            };
        }, function (__dict_Applicative_134) {
            return function (_232) {
                return function (_233) {
                    if (_233 instanceof Data_Either.Left) {
                        return Prelude.pure(__dict_Applicative_134)(new Data_Either.Left(_233.value0));
                    };
                    if (_233 instanceof Data_Either.Right) {
                        return Prelude["<$>"]((__dict_Applicative_134["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_232(_233.value0));
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = function () {
        return new Traversable(Data_Foldable.foldableArray, Data_Array.functorArray, function (__dict_Applicative_137) {
            return function (_231) {
                if (_231.length === 0) {
                    return Prelude.pure(__dict_Applicative_137)([  ]);
                };
                if (_231.length >= 1) {
                    var _634 = _231.slice(1);
                    return Prelude["<*>"](__dict_Applicative_137["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_137["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_231[0]))(sequence(traversableArray())(__dict_Applicative_137)(_634));
                };
                throw new Error("Failed pattern match");
            };
        }, function (__dict_Applicative_136) {
            return function (_229) {
                return function (_230) {
                    if (_230.length === 0) {
                        return Prelude.pure(__dict_Applicative_136)([  ]);
                    };
                    if (_230.length >= 1) {
                        var _638 = _230.slice(1);
                        return Prelude["<*>"](__dict_Applicative_136["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_136["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_229(_230[0])))(traverse(traversableArray())(__dict_Applicative_136)(_229)(_638));
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    var zipWithA = function (__dict_Applicative_138) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray())(__dict_Applicative_138)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var $$for = function (__dict_Applicative_139) {
        return function (__dict_Traversable_140) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_140)(__dict_Applicative_139)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        zipWithA: zipWithA, 
        "for": $$for, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableRef: traversableRef, 
        traversableMaybe: traversableMaybe, 
        traversableTuple: traversableTuple
    };
})();
var PS = PS || {};
PS.Mario = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Math = PS.Math;
    var Data_Foldable = PS.Data_Foldable;
    var Signal = PS.Signal;
    var Mario_DOM = PS.Mario_DOM;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Signal_DOM = PS.Signal_DOM;
    function Jumping() {

    };
    Jumping.value = new Jumping();
    function Walking() {

    };
    Walking.value = new Walking();
    function Standing() {

    };
    Standing.value = new Standing();
    function Left() {

    };
    Left.value = new Left();
    function Right() {

    };
    Right.value = new Right();
    var velocity = function (s) {
        var _639 = {};
        for (var _640 in s) {
            if (s.hasOwnProperty(_640)) {
                _639[_640] = s[_640];
            };
        };
        _639.x = s.x + s.dx;
        _639.y = s.y + s.dy;
        return _639;
    };
    var showVerb = function () {
        return new Prelude.Show(function (_252) {
            if (_252 instanceof Jumping) {
                return "jump";
            };
            if (_252 instanceof Walking) {
                return "walk";
            };
            if (_252 instanceof Standing) {
                return "stand";
            };
            throw new Error("Failed pattern match");
        });
    };
    var showDirection = function () {
        return new Prelude.Show(function (_251) {
            if (_251 instanceof Left) {
                return "left";
            };
            if (_251 instanceof Right) {
                return "right";
            };
            throw new Error("Failed pattern match");
        });
    };
    var rightKeyCodes = [ 39, 68 ];
    var offsetGround = function (amount) {
        return function (pos) {
            var _643 = {};
            for (var _644 in pos) {
                if (pos.hasOwnProperty(_644)) {
                    _643[_644] = pos[_644];
                };
            };
            _643.y = pos.y + amount - 4;
            return _643;
        };
    };
    var mkInputs = function (l) {
        return function (r) {
            return function (j) {
                return {
                    left: l, 
                    right: r, 
                    jump: j
                };
            };
        };
    };
    var minJumpHeight = 3;
    var maxMoveSpeed = 2.5;
    var marioSpriteUrl = function (verb) {
        return function (dir) {
            return "http://elm-lang.org/imgs/mario/" + (Prelude.show(showVerb())(verb) + ("/" + (Prelude.show(showDirection())(dir) + ".gif")));
        };
    };
    var leftKeyCodes = [ 37, 65 ];
    var jumpKeyCodes = [ 38, 87 ];
    var jumpCoefficient = 0.4;
    var jumpSpeed = function (dx) {
        return minJumpHeight + jumpCoefficient * Math.abs(dx);
    };
    var isAirborne = function (s) {
        return s.y > 0;
    };
    var groundHeight = 40;
    var groundFriction = 0.1;
    var groundAccel = 6.0e-2;
    var gravity = 0.2;
    var jump = function (_245) {
        return function (_246) {
            if (_245 && !isAirborne(_246)) {
                var _647 = {};
                for (var _648 in _246) {
                    if (_246.hasOwnProperty(_648)) {
                        _647[_648] = _246[_648];
                    };
                };
                _647.dy = jumpSpeed(_246.dx);
                return _647;
            };
            if (!_245 && (isAirborne(_246) && _246.dy > 0)) {
                var _649 = {};
                for (var _650 in _246) {
                    if (_246.hasOwnProperty(_650)) {
                        _649[_650] = _246[_650];
                    };
                };
                _649.dy = _246.dy - gravity;
                return _649;
            };
            return _246;
        };
    };
    var initialState = jump(true)({
        x: -40, 
        y: 0, 
        dx: maxMoveSpeed, 
        dy: 0, 
        dir: Right.value
    });
    var currentActivity = function (_244) {
        if (isAirborne(_244)) {
            return Jumping.value;
        };
        if (_244.dx !== 0) {
            return Walking.value;
        };
        return Standing.value;
    };
    var combineKeyPresses = Data_Foldable.foldl(Data_Foldable.foldableArray())(Signal.merge)(Signal.constant(false));
    var applyGravity = function (s) {
        return s.y <= (-s.dy) ? (function () {
    var _652 = {};
    for (var _653 in s) {
        if (s.hasOwnProperty(_653)) {
            _652[_653] = s[_653];
        };
    };
    _652.y = 0;
    _652.dy = 0;
    return _652;
})() : (function () {
    var _654 = {};
    for (var _655 in s) {
        if (s.hasOwnProperty(_655)) {
            _654[_655] = s[_655];
        };
    };
    _654.y = s.y + s.dy;
    _654.dy = s.dy - gravity;
    return _654;
})();
    };
    var airFriction = 2.0e-2;
    var friction = function (s) {
        return isAirborne(s) ? airFriction : groundFriction;
    };
    var applyFriction = function (_250) {
        if (_250.dx === 0) {
            return _250;
        };
        if (Math.abs(_250.dx) <= friction(_250)) {
            var _657 = {};
            for (var _658 in _250) {
                if (_250.hasOwnProperty(_658)) {
                    _657[_658] = _250[_658];
                };
            };
            _657.dx = 0;
            return _657;
        };
        if (_250.dx > 0) {
            var _659 = {};
            for (var _660 in _250) {
                if (_250.hasOwnProperty(_660)) {
                    _659[_660] = _250[_660];
                };
            };
            _659.dx = _250.dx - friction(_250);
            return _659;
        };
        if (_250.dx < 0) {
            var _661 = {};
            for (var _662 in _250) {
                if (_250.hasOwnProperty(_662)) {
                    _661[_662] = _250[_662];
                };
            };
            _661.dx = _250.dx + friction(_250);
            return _661;
        };
        throw new Error("Failed pattern match");
    };
    var airAccel = 4.0e-2;
    var accel = function (s) {
        return isAirborne(s) ? airAccel : groundAccel;
    };
    var walk = function (_247) {
        return function (_248) {
            return function (_249) {
                if (_247 && !_248) {
                    var s$prime = _249.dx > 0 ? applyFriction(_249) : _249;
                    var _666 = {};
                    for (var _667 in s$prime) {
                        if (s$prime.hasOwnProperty(_667)) {
                            _666[_667] = s$prime[_667];
                        };
                    };
                    _666.dx = Math.max(-maxMoveSpeed)(s$prime.dx - accel(s$prime));
                    _666.dir = Left.value;
                    return _666;
                };
                if (!_247 && _248) {
                    var s$prime = _249.dx < 0 ? applyFriction(_249) : _249;
                    var _668 = {};
                    for (var _669 in s$prime) {
                        if (s$prime.hasOwnProperty(_669)) {
                            _668[_669] = s$prime[_669];
                        };
                    };
                    _668.dx = Math.min(maxMoveSpeed)(s$prime.dx + accel(s$prime));
                    _668.dir = Right.value;
                    return _668;
                };
                return applyFriction(_249);
            };
        };
    };
    var marioLogic = function (inputs) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(velocity)(Prelude["<<<"](Prelude.semigroupoidArr())(applyGravity)(Prelude["<<<"](Prelude.semigroupoidArr())(jump(inputs.jump))(walk(inputs.left)(inputs.right))));
    };
    var main = Mario_DOM.onDOMContentLoaded(function __do() {
        var _9 = Mario_DOM.getMario();
        var _8 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(leftKeyCodes)))();
        var _7 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(rightKeyCodes)))();
        var _6 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(jumpKeyCodes)))();
        return (function () {
            var inputs = Prelude["<*>"](Signal.applySignal())(Prelude["<*>"](Signal.applySignal())(Prelude["<$>"](Signal.functorSignal())(mkInputs)(_8))(_7))(_6);
            return function __do() {
                var _5 = Signal_DOM.animationFrame();
                return Signal.runSignal(Signal["~>"](Signal.functorSignal())(Signal.foldp(marioLogic)(initialState)(Signal.sampleOn(_5)(inputs)))(function (gameState) {
                    return function __do() {
                        Mario_DOM.updateSprite(_9)(marioSpriteUrl(currentActivity(gameState))(gameState.dir))();
                        return Mario_DOM.updatePosition(_9)(offsetGround(groundHeight)({
                            x: gameState.x, 
                            y: gameState.y
                        }))();
                    };
                }))();
            };
        })()();
    });
    return {
        Jumping: Jumping, 
        Walking: Walking, 
        Standing: Standing, 
        Left: Left, 
        Right: Right, 
        main: main, 
        marioLogic: marioLogic, 
        applyFriction: applyFriction, 
        walk: walk, 
        jump: jump, 
        jumpSpeed: jumpSpeed, 
        applyGravity: applyGravity, 
        velocity: velocity, 
        friction: friction, 
        accel: accel, 
        currentActivity: currentActivity, 
        isAirborne: isAirborne, 
        mkInputs: mkInputs, 
        combineKeyPresses: combineKeyPresses, 
        offsetGround: offsetGround, 
        marioSpriteUrl: marioSpriteUrl, 
        airFriction: airFriction, 
        groundFriction: groundFriction, 
        airAccel: airAccel, 
        groundAccel: groundAccel, 
        maxMoveSpeed: maxMoveSpeed, 
        minJumpHeight: minJumpHeight, 
        jumpCoefficient: jumpCoefficient, 
        gravity: gravity, 
        groundHeight: groundHeight, 
        jumpKeyCodes: jumpKeyCodes, 
        rightKeyCodes: rightKeyCodes, 
        leftKeyCodes: leftKeyCodes, 
        initialState: initialState, 
        showDirection: showDirection, 
        showVerb: showVerb
    };
})();
PS.Mario.main();

