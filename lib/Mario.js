// Generated by psc version 0.5.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_1) {
        return $less$greater(__dict_Semigroup_1);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var show = function (dict) {
        return dict.show;
    };
    var semigroupoidArr = function () {
        return new Semigroupoid(function (f) {
            return function (g) {
                return function (x) {
                    return f(g(x));
                };
            };
        });
    };
    var semigroupString = function () {
        return new Semigroup(concatString);
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_4) {
        return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = function () {
        return new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftA1 = function (__dict_Applicative_6) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
            };
        };
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqNumber = function () {
        return new Eq(refIneq, refEq);
    };
    var ordNumber = function () {
        return new Ord(eqNumber, unsafeCompare);
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_10) {
        return function (a1) {
            return function (a2) {
                var _253 = compare(__dict_Ord_10)(a1)(a2);
                if (_253 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _254 = compare(__dict_Ord_11)(a1)(a2);
                if (_254 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _255 = compare(__dict_Ord_12)(a1)(a2);
                if (_255 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var boolLikeBoolean = function () {
        return new BoolLike(boolAnd, boolNot, boolOr);
    };
    var ap = function (__dict_Monad_14) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_14)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Semigroupoid: Semigroupoid, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "&&": $amp$amp, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "*": $times, 
        "-": $minus, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        "<<<": $less$less$less, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        numNumber: numNumber, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    return {
        min: min, 
        max: max, 
        abs: abs
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var applicativeEff = function () {
        return new Prelude.Applicative(applyEff, returnE);
    };
    var applyEff = function () {
        return new Prelude.Apply(Prelude.ap(monadEff()), functorEff);
    };
    var monadEff = function () {
        return new Prelude.Monad(applicativeEff, bindEff);
    };
    var bindEff = function () {
        return new Prelude.Bind(bindE, applyEff);
    };
    var functorEff = function () {
        return new Prelude.Functor(Prelude.liftA1(applicativeEff()));
    };
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Mario_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function updatePosition(node) {
    return function(coord) {
      return function() {
        node.style.left = coord.x + 'px';
        node.style.bottom = coord.y + 'px';
      };
    };
  }
  ;
    
  function updateSprite(node) {
    var a = document.createElement('a');
    return function(url) {
      return function() {
        a.href = url;
        if (node.src !== a.href) node.src = url;
      };
    };
  }
  ;
    
  function onDOMContentLoaded(action) {
    if (document.readyState === 'interactive') {
      action();
    } else {
      document.addEventListener('DOMContentLoaded', action);
    }
    return function() { return {}; };
  }
  ;
    function getMario() { return document.getElementById('mario'); };
    return {
        getMario: getMario, 
        onDOMContentLoaded: onDOMContentLoaded, 
        updateSprite: updateSprite, 
        updatePosition: updatePosition
    };
})();
var PS = PS || {};
PS.Signal = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function constant(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };
    
  function liftP(constant) {
  return function(fun) {
  return function(sig) {
    var out = constant(fun(sig.get()));
    sig.subscribe(function(val) { out.set(fun(val)); });
    return out;
  };};};
    
  function applySigP(constant) {
  return function(fun) {
  return function(sig) {
    var out = constant(fun.get()(sig.get()));
    var produce = function() { out.set(fun.get()(sig.get())); };
    fun.subscribe(produce);
    sig.subscribe(produce);
    return out;
  };};};
    
  function mergeP(consant) {
  return function(sig1) {
  return function(sig2) {
    var out = constant(sig1.get());
    sig1.subscribe(out.set);
    sig2.subscribe(out.set);
    return out;
  };};};
    
  function foldpP(constant) {
  return function(fun) {
  return function(seed) {
  return function(sig) {
    var acc = fun(sig.get())(seed);
    var out = constant(acc);
    sig.subscribe(function(val) {
      acc = fun(val)(acc);
      out.set(acc);
    });
    return out;
  };};};};
    
  function sampleOnP(constant) {
  return function(sig1) {
  return function(sig2) {
    var out = constant(sig2.get());
    sig1.subscribe(function() {
      out.set(sig2.get());
    });
    return out;
  };};};
    
  function runSignal(sig) {
  return function() {
    sig.subscribe(function(val) {
      val();
    });
    return {};
  };};
    var $tilde$greater = function (__dict_Functor_16) {
        return Prelude.flip(Prelude["<$>"](__dict_Functor_16));
    };
    var sampleOn = sampleOnP(constant);
    var merge = mergeP(constant);
    var lift = liftP(constant);
    var functorSignal = function () {
        return new Prelude.Functor(lift);
    };
    var foldp = foldpP(constant);
    var applySig = applySigP(constant);
    var applySignal = function () {
        return new Prelude.Apply(applySig, functorSignal);
    };
    return {
        "~>": $tilde$greater, 
        runSignal: runSignal, 
        sampleOn: sampleOn, 
        foldp: foldp, 
        merge: merge, 
        applySig: applySig, 
        lift: lift, 
        constant: constant, 
        functorSignal: functorSignal, 
        applySignal: applySignal
    };
})();
var PS = PS || {};
PS.Signal_DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Signal = PS.Signal;
    
  function keyPressedP(constant) {
  return function(keyCode) {
  return function() {
    var out = constant(false);
    window.addEventListener('keydown', function(e) {
      if (e.keyCode === keyCode) out.set(true);
    });
    window.addEventListener('keyup', function(e) {
      if (e.keyCode === keyCode) out.set(false);
    });
    return out;
  };};};
    
  function animationFrameP(constant) {
  return function() {
    var requestAnimFrame, cancelAnimFrame;
    if (window.requestAnimationFrame) {
      requestAnimFrame = window.requestAnimationFrame;
      cancelAnimFrame = window.cancelAnimationFrame;
    } else if (window.mozRequestAnimationFrame) {
      requestAnimFrame = window.mozRequestAnimationFrame;
      cancelAnimFrame = window.mozCancelAnimationFrame;
    } else if (window.webkitRequestAnimationFrame) {
      requestAnimFrame = window.webkitRequestAnimationFrame;
      cancelAnimFrame = window.webkitCancelAnimationFrame;
    } else if (window.msRequestAnimationFrame) {
      requestAnimFrame = window.msRequestAnimationFrame;
      cancelAnimFrame = window.msCancelAnimationFrame;
    } else if (window.oRequestAnimationFrame) {
      requestAnimFrame = window.oRequestAnimationFrame;
      cancelAnimFrame = window.oCancelAnimationFrame;
    } else {
      requestAnimFrame = function(cb) {setTimeout(function() {cb(_now())}, 1000/60)};
      cancelAnimFrame = window.clearTimeout;
    }
    var out = constant(Date.now());
    requestAnimFrame(function tick(t) {
      out.set(t); requestAnimFrame(tick);
    });
    return out;
  };};
    var keyPressed = keyPressedP(Signal.constant);
    var animationFrame = animationFrameP(Signal.constant);
    return {
        keyPressed: keyPressed, 
        animationFrame: animationFrame
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    var functorArray = function () {
        return new Prelude.Functor(map);
    };
    return {
        map: map, 
        functorArray: functorArray
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        mempty: mempty
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    function foldrArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = xs.length - 1; i >= 0; --i) {        acc = f(xs[i])(acc);      }      return acc;    }  }};
    function foldlArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = 0, len = xs.length; i < len; ++i) {        acc = f(acc)(xs[i]);      }      return acc;    }  }};
    var foldr = function (dict) {
        return dict.foldr;
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var foldableArray = function () {
        return new Foldable(function (__dict_Monoid_113) {
            return function (f) {
                return function (xs) {
                    return foldr(foldableArray())(function (x) {
                        return function (acc) {
                            return Prelude["<>"](__dict_Monoid_113["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                        };
                    })(Data_Monoid.mempty(__dict_Monoid_113))(xs);
                };
            };
        }, function (f) {
            return function (z) {
                return function (xs) {
                    return foldlArray(f)(z)(xs);
                };
            };
        }, function (f) {
            return function (z) {
                return function (xs) {
                    return foldrArray(f)(z)(xs);
                };
            };
        });
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Foldable = PS.Data_Foldable;
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = function () {
        return new Traversable(Data_Foldable.foldableArray, Data_Array.functorArray, function (__dict_Applicative_138) {
            return function (_231) {
                if (_231.length === 0) {
                    return Prelude.pure(__dict_Applicative_138)([  ]);
                };
                if (_231.length >= 1) {
                    var _260 = _231.slice(1);
                    return Prelude["<*>"](__dict_Applicative_138["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_138["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_231[0]))(sequence(traversableArray())(__dict_Applicative_138)(_260));
                };
                throw new Error("Failed pattern match");
            };
        }, function (__dict_Applicative_137) {
            return function (_229) {
                return function (_230) {
                    if (_230.length === 0) {
                        return Prelude.pure(__dict_Applicative_137)([  ]);
                    };
                    if (_230.length >= 1) {
                        var _264 = _230.slice(1);
                        return Prelude["<*>"](__dict_Applicative_137["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_137["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_229(_230[0])))(traverse(traversableArray())(__dict_Applicative_137)(_229)(_264));
                    };
                    throw new Error("Failed pattern match");
                };
            };
        });
    };
    return {
        Traversable: Traversable, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Mario = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Math = PS.Math;
    var Data_Foldable = PS.Data_Foldable;
    var Signal = PS.Signal;
    var Mario_DOM = PS.Mario_DOM;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Signal_DOM = PS.Signal_DOM;
    function Jumping() {

    };
    Jumping.value = new Jumping();
    function Walking() {

    };
    Walking.value = new Walking();
    function Standing() {

    };
    Standing.value = new Standing();
    function Left() {

    };
    Left.value = new Left();
    function Right() {

    };
    Right.value = new Right();
    var velocity = function (s) {
        var _265 = {};
        for (var _266 in s) {
            if (s.hasOwnProperty(_266)) {
                _265[_266] = s[_266];
            };
        };
        _265.x = s.x + s.dx;
        _265.y = s.y + s.dy;
        return _265;
    };
    var showVerb = function () {
        return new Prelude.Show(function (_252) {
            if (_252 instanceof Jumping) {
                return "jump";
            };
            if (_252 instanceof Walking) {
                return "walk";
            };
            if (_252 instanceof Standing) {
                return "stand";
            };
            throw new Error("Failed pattern match");
        });
    };
    var showDirection = function () {
        return new Prelude.Show(function (_251) {
            if (_251 instanceof Left) {
                return "left";
            };
            if (_251 instanceof Right) {
                return "right";
            };
            throw new Error("Failed pattern match");
        });
    };
    var rightKeyCodes = [ 39, 68 ];
    var offsetGround = function (amount) {
        return function (pos) {
            var _269 = {};
            for (var _270 in pos) {
                if (pos.hasOwnProperty(_270)) {
                    _269[_270] = pos[_270];
                };
            };
            _269.y = pos.y + amount - 4;
            return _269;
        };
    };
    var mkInputs = function (l) {
        return function (r) {
            return function (j) {
                return {
                    left: l, 
                    right: r, 
                    jump: j
                };
            };
        };
    };
    var minJumpHeight = 3;
    var maxMoveSpeed = 2.5;
    var marioSpriteUrl = function (verb) {
        return function (dir) {
            return "resources/mario/" + (Prelude.show(showVerb())(verb) + ("/" + (Prelude.show(showDirection())(dir) + ".gif")));
        };
    };
    var leftKeyCodes = [ 37, 65 ];
    var jumpKeyCodes = [ 38, 87 ];
    var jumpCoefficient = 0.4;
    var jumpSpeed = function (dx) {
        return minJumpHeight + jumpCoefficient * Math.abs(dx);
    };
    var isAirborne = function (s) {
        return s.y > 0;
    };
    var groundHeight = 40;
    var groundFriction = 0.1;
    var groundAccel = 6.0e-2;
    var gravity = 0.2;
    var jump = function (_245) {
        return function (_246) {
            if (_245 && !isAirborne(_246)) {
                var _273 = {};
                for (var _274 in _246) {
                    if (_246.hasOwnProperty(_274)) {
                        _273[_274] = _246[_274];
                    };
                };
                _273.dy = jumpSpeed(_246.dx);
                return _273;
            };
            if (!_245 && (isAirborne(_246) && _246.dy > 0)) {
                var _275 = {};
                for (var _276 in _246) {
                    if (_246.hasOwnProperty(_276)) {
                        _275[_276] = _246[_276];
                    };
                };
                _275.dy = _246.dy - gravity;
                return _275;
            };
            return _246;
        };
    };
    var initialState = jump(true)({
        x: -40, 
        y: 0, 
        dx: maxMoveSpeed, 
        dy: 0, 
        dir: Right.value
    });
    var currentActivity = function (_244) {
        if (isAirborne(_244)) {
            return Jumping.value;
        };
        if (_244.dx !== 0) {
            return Walking.value;
        };
        return Standing.value;
    };
    var combineKeyPresses = Data_Foldable.foldl(Data_Foldable.foldableArray())(Signal.merge)(Signal.constant(false));
    var applyGravity = function (s) {
        return s.y <= (-s.dy) ? (function () {
    var _278 = {};
    for (var _279 in s) {
        if (s.hasOwnProperty(_279)) {
            _278[_279] = s[_279];
        };
    };
    _278.y = 0;
    _278.dy = 0;
    return _278;
})() : (function () {
    var _280 = {};
    for (var _281 in s) {
        if (s.hasOwnProperty(_281)) {
            _280[_281] = s[_281];
        };
    };
    _280.y = s.y + s.dy;
    _280.dy = s.dy - gravity;
    return _280;
})();
    };
    var airFriction = 2.0e-2;
    var friction = function (s) {
        return isAirborne(s) ? airFriction : groundFriction;
    };
    var applyFriction = function (_250) {
        if (_250.dx === 0) {
            return _250;
        };
        if (Math.abs(_250.dx) <= friction(_250)) {
            var _283 = {};
            for (var _284 in _250) {
                if (_250.hasOwnProperty(_284)) {
                    _283[_284] = _250[_284];
                };
            };
            _283.dx = 0;
            return _283;
        };
        if (_250.dx > 0) {
            var _285 = {};
            for (var _286 in _250) {
                if (_250.hasOwnProperty(_286)) {
                    _285[_286] = _250[_286];
                };
            };
            _285.dx = _250.dx - friction(_250);
            return _285;
        };
        if (_250.dx < 0) {
            var _287 = {};
            for (var _288 in _250) {
                if (_250.hasOwnProperty(_288)) {
                    _287[_288] = _250[_288];
                };
            };
            _287.dx = _250.dx + friction(_250);
            return _287;
        };
        throw new Error("Failed pattern match");
    };
    var airAccel = 4.0e-2;
    var accel = function (s) {
        return isAirborne(s) ? airAccel : groundAccel;
    };
    var walk = function (_247) {
        return function (_248) {
            return function (_249) {
                if (_247 && !_248) {
                    var s$prime = _249.dx > 0 ? applyFriction(_249) : _249;
                    var _292 = {};
                    for (var _293 in s$prime) {
                        if (s$prime.hasOwnProperty(_293)) {
                            _292[_293] = s$prime[_293];
                        };
                    };
                    _292.dx = Math.max(-maxMoveSpeed)(s$prime.dx - accel(s$prime));
                    _292.dir = Left.value;
                    return _292;
                };
                if (!_247 && _248) {
                    var s$prime = _249.dx < 0 ? applyFriction(_249) : _249;
                    var _294 = {};
                    for (var _295 in s$prime) {
                        if (s$prime.hasOwnProperty(_295)) {
                            _294[_295] = s$prime[_295];
                        };
                    };
                    _294.dx = Math.min(maxMoveSpeed)(s$prime.dx + accel(s$prime));
                    _294.dir = Right.value;
                    return _294;
                };
                return applyFriction(_249);
            };
        };
    };
    var marioLogic = function (inputs) {
        return Prelude["<<<"](Prelude.semigroupoidArr())(velocity)(Prelude["<<<"](Prelude.semigroupoidArr())(applyGravity)(Prelude["<<<"](Prelude.semigroupoidArr())(jump(inputs.jump))(walk(inputs.left)(inputs.right))));
    };
    var main = Mario_DOM.onDOMContentLoaded(function __do() {
        var _9 = Mario_DOM.getMario();
        var _8 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(leftKeyCodes)))();
        var _7 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(rightKeyCodes)))();
        var _6 = Prelude["<$>"](Control_Monad_Eff.functorEff())(combineKeyPresses)(Data_Traversable.sequence(Data_Traversable.traversableArray())(Control_Monad_Eff.applicativeEff())(Prelude["<$>"](Data_Array.functorArray())(Signal_DOM.keyPressed)(jumpKeyCodes)))();
        return (function () {
            var inputs = Prelude["<*>"](Signal.applySignal())(Prelude["<*>"](Signal.applySignal())(Prelude["<$>"](Signal.functorSignal())(mkInputs)(_8))(_7))(_6);
            return function __do() {
                var _5 = Signal_DOM.animationFrame();
                return Signal.runSignal(Signal["~>"](Signal.functorSignal())(Signal.foldp(marioLogic)(initialState)(Signal.sampleOn(_5)(inputs)))(function (gameState) {
                    return function __do() {
                        Mario_DOM.updateSprite(_9)(marioSpriteUrl(currentActivity(gameState))(gameState.dir))();
                        return Mario_DOM.updatePosition(_9)(offsetGround(groundHeight)({
                            x: gameState.x, 
                            y: gameState.y
                        }))();
                    };
                }))();
            };
        })()();
    });
    return {
        Jumping: Jumping, 
        Walking: Walking, 
        Standing: Standing, 
        Left: Left, 
        Right: Right, 
        main: main, 
        marioLogic: marioLogic, 
        applyFriction: applyFriction, 
        walk: walk, 
        jump: jump, 
        jumpSpeed: jumpSpeed, 
        applyGravity: applyGravity, 
        velocity: velocity, 
        friction: friction, 
        accel: accel, 
        currentActivity: currentActivity, 
        isAirborne: isAirborne, 
        mkInputs: mkInputs, 
        combineKeyPresses: combineKeyPresses, 
        offsetGround: offsetGround, 
        marioSpriteUrl: marioSpriteUrl, 
        airFriction: airFriction, 
        groundFriction: groundFriction, 
        airAccel: airAccel, 
        groundAccel: groundAccel, 
        maxMoveSpeed: maxMoveSpeed, 
        minJumpHeight: minJumpHeight, 
        jumpCoefficient: jumpCoefficient, 
        gravity: gravity, 
        groundHeight: groundHeight, 
        jumpKeyCodes: jumpKeyCodes, 
        rightKeyCodes: rightKeyCodes, 
        leftKeyCodes: leftKeyCodes, 
        initialState: initialState, 
        showDirection: showDirection, 
        showVerb: showVerb
    };
})();
PS.Mario.main();

